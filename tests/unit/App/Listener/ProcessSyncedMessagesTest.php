<?php

use App\Events\SqsMessagesWasSynced;
use App\Listeners\ProcessSyncedMessages;
use App\Message;
use App\Queue;
use App\Repositories\Eloquent\MessageRepositoryEloquent;
use App\Subscriber;

class ProcessSyncedMessagesTest extends BaseTestCase
{
    /**
     * @var MessageRepositoryEloquent
     */
    private $message;

    /**
     * @var ProcessSyncedMessages
     */
    private $listener;

    /**
     *
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->listener = $this->app->make(ProcessSyncedMessages::class);
        $this->message = $this->app->make(MessageRepositoryEloquent::class);
    }

    /** @test */
    public function it_stores_to_database_the_sent_messages_result_on_success()
    {
        $eventInstance = $this->prepareInstanceOfSqsMessageWasSynced();

        $messages = $this->message->findAllWhereIn('message_id', $eventInstance->messageIdList, ['queue']);
        $subscriberAttachInput = collect([]);
        foreach ($messages as $message) {
            foreach ($message->queue->subscriber as $subscriber) {
                $subscriberAttachInput->put($subscriber->id, ['status' => 'Y']);
            }
        }

        $this->listener->handle($eventInstance);

        $this->assertMultipleSeeInDatabase('sent_message', $subscriberAttachInput->toArray());
    }

    private function prepareInstanceOfSqsMessageWasSynced()
    {
        $firstQueue = factory(Queue::class)->create();
        $secondQueue = factory(Queue::class)->create();

        $messagesOnFirstQueue = factory(Message::class, 5)->create(['queue_id' => $firstQueue->id]);
        $messagesOnSecondQueue = factory(Message::class, 5)->create(['queue_id' => $secondQueue->id]);

        $subscriberOne = factory(Subscriber::class, 3)->create();
        $subscriberTwo = factory(Subscriber::class, 2)->create();

        $firstQueue->subscriber()->attach(collect($subscriberOne)->pluck('id')->toArray());
        $secondQueue->subscriber()->attach(collect($subscriberTwo)->pluck('id')->toArray());


        $messageIdList = [];

        foreach ($messagesOnFirstQueue as $messageFirst) {
            $messageIdList[] = $messageFirst->message_id;
        }

        foreach ($messagesOnSecondQueue as $messageSecond) {
            $messageIdList[] = $messageSecond->message_id;
        }

        return new SqsMessagesWasSynced($messageIdList);
    }
}